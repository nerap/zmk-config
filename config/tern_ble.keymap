/*
 * Copyright (c) 2024 Allister MacLeod
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT 0
#define HD_GOLD 0
#define SYM     1
#define NAV     2
#define NUM     3
#define KEEBCTL 4

#include "key-labels-glam/tern.h"
#include "glam-multigraph.dtsi"

// TODO:
// - figure out where to put smart shift or caps word
// - add alt-tab and i3wm shortcuts

/ {
keymap {
  compatible = "zmk,keymap";

  hands_down_layer {
// mostly Hands Down Gold with adjusted punctuation
// Combos for letters: RG->W, XR->Z, UOY->Q, VB->J
// Combos for symbols: ,.->#
// Plus a bunch of digraph and triple combos.
//       ,-----------------------.             ,-----------------------.
// ,-----+  G  |  M  |  P  |  V  |             | , ; | . : | ' ! | " ? +-----.
// |  R  |  S  |  N  |  D  |  B  |             | - / |  A  |  E  |  I  |  H  |
// |  X  |  F  |  L  |  C  +-----'-----. ,-----`-----+  U  |  O  |  Y  |  K  |
// `-----------------------| SYM |  T  | |Space| NAV |-----------------------'
    bindings = <
       &kp G  &kp M  &kp P  &kp V                 &com_semi    &dot_cln  &sqt_bang  &dqt_ques
&kp R  &kp S  &kp N  &kp D  &kp B                 &dash_slash  &kp A     &kp E      &kp I  &kp H
&kp X  &kp F  &kp L  &kp C                                     &kp U     &kp O      &kp Y  &kp K
                            &mo SYM  &kp T   &kp SPACE  &mo NAV
    >;
    display-name = "HDGold";
  };
  symbols_layer {
//       ,-----------------------.             ,-----------------------.
// ,-----+  <  |  >  |  "  |  '  |             |  &  |  :  |  [  |  ]  +-----.
// |  `  |  -  |  +  |  =  |  @  |             |  |  |  ;  |  {  |  }  |  ?  |
// |  ~  |  ^  |  *  |  %  +-----'-----. ,-----`-----+  $  |  (  |  )  | / \ |
// `-----------------------|#####|  #  | |  _  | NUM |-----------------------'
    bindings = <
           &kp LT     &kp GT    &kp DQT      &kp SQT      &kp AMPS  &kp COLON   &kp LBKT  &kp RBKT
&kp GRAVE  &kp MINUS  &kp PLUS  &kp EQUAL    &kp AT       &kp PIPE  &kp SEMI    &kp LBRC  &kp RBRC  &kp QMARK
&kp TILDE  &kp CARET  &kp STAR  &kp PERCENT                         &kp DOLLAR  &kp LPAR  &kp RPAR  &slashes
                                &trans &kp HASH    &kp UNDERSCORE &trans
    >;
    display-name = "SYM";
  };
  navigation_layer {
// I took a few liberties with the control keys on the left middle
// finger, since I find C-w, C-a, and C-q more useful than C-m, C-n,
// and C-l. I figure I can use sticky CTRL or the pinky combo for those.
//       ,-----------------------.             ,-----------------------.
// ,-----+ ^G  | ^W  | ^E  | ^V  |             | Ins | PgU | Up  | PgD +-----.
// | ^R  | ^S  | ^A  | ^D  | ^Z  |             | Home| Left| Down|Right| Ret |
// | ^X  | ^F  | ^Q  | ^C  +-----'-----. ,-----`-----+ Ctl |Shift| Alt | GUI |
// `-----------------------| NUM | ^T  | | End |#####|-----------------------'
    bindings = <
           &kp LC(G)  &kp LC(W)  &kp LC(E)  &kp LC(V)       &kp INS   &kp PG_UP  &kp UP     &kp PG_DN
&kp LC(R)  &kp LC(S)  &kp LC(A)  &kp LC(D)  &kp LC(Z)       &kp HOME  &kp LEFT   &kp DOWN   &kp RIGHT  &kp RET
&kp LC(X)  &kp LC(F)  &kp LC(Q)  &kp LC(C)                            &sk RCTRL  &sk RSHFT  &sk LALT   &sk RGUI
                                       &trans &kp LC(T)   &kp END &trans
    >;
    display-name = "NAV";
  };
  numeric_layer {
// Numeric layer activated conditionally when NAV and SYM are active together.
//       ,-----------------------.             ,-----------------------.
// ,-----+     |     |     |     |             |     |     |     |     +-----.
// |  7  |  5  |  3  |  1  |  9  |             |  8  |  0  |  2  |  4  |  6  |
// |     |     |     |     +-----'-----. ,-----`-----+     |     |     |     |
// `-----------------------|     |     | |     |     |-----------------------'
    bindings = <
        &trans  &trans  &trans  &trans                 &trans  &trans  &trans  &trans
&kp N7  &kp N5  &kp N3  &kp N1  &kp N9                 &kp N8  &kp N0  &kp N2  &kp N4  &kp N6
&trans  &trans  &trans  &trans                                 &trans  &trans  &trans  &trans
                                &trans &trans   &trans &trans
    >;
    display-name = "NUM";
  };
  keyboard_control_layer {
//       ,-----------------------.             ,-----------------------.
// ,-----+     |     |     | DFU |             |     |     |     |     +-----.
// |     |     |     |     |     |             |     |     |     |     |     |
// |     |     |     |     +-----'-----. ,-----`-----+     |     |     |     |
// `-----------------------|     |     | |     |     |-----------------------'
    bindings = <
        &trans  &trans  &trans  &bootloader            &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans                 &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans                                 &trans  &trans  &trans  &trans
                                &trans &trans   &trans &trans
    >;
    display-name = "KBDCTL";
  };
}; // end keymap

behaviors {
  // Symbol morphs for non-conventional shifting.
  slash_hash: morph_solidus_octothorpe {
    compatible = "zmk,behavior-mod-morph";
    #binding-cells = <0>;
    bindings = <&kp FSLH>, <&kp HASH>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
  };
  dash_slash: morph_hyphen_solidus {
    compatible = "zmk,behavior-mod-morph";
    #binding-cells = <0>;
    bindings = <&kp MINUS>, <&kp FSLH>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
  };
  dot_cln: morph_period_colon {
    compatible = "zmk,behavior-mod-morph";
    #binding-cells = <0>;
    bindings = <&kp DOT>, <&kp COLON>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
  };
  sqt_bang: morph_apostrophe_exclamation {
    compatible = "zmk,behavior-mod-morph";
    #binding-cells = <0>;
    bindings = <&kp SQT>, <&kp EXCL>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
  };
  dqt_ques: morph_quote_question {
    compatible = "zmk,behavior-mod-morph";
    #binding-cells = <0>;
    bindings = <&kp DQT>, <&kp QMARK>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
  };
  com_semi: morph_comma_semicolon {
    compatible = "zmk,behavior-mod-morph";
    #binding-cells = <0>;
    bindings = <&kp COMMA>, <&kp SEMICOLON>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
  };
  minus_plus: morph_hyphen_plus {
    compatible = "zmk,behavior-mod-morph";
    #binding-cells = <0>;
    bindings = <&kp MINUS>, <&kp PLUS>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
  };
  slashes: morph_slash_backslash {
    compatible = "zmk,behavior-mod-morph";
    #binding-cells = <0>;
    bindings = <&kp FSLH>, <&kp BSLH>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
  };
}; // end behaviors

//      0   1   2   3             4   5   6   7
//  8   9  10  11  12            13  14  15  16  17
// 18  19  20  21                    22  23  24  25
//                 26  27    28  29

//     LT3 LT2 LT1 LT0          RT0 RT1 RT2 RT3
// LM4 LM3 LM2 LM1 LM0          RM0 RM1 RM2 RM3 RM4
// LB4 LB3 LB2 LB1                  RB1 RB2 RB3 RB4
//                 LH1 LH0  RH0 RH1

combos {
  compatible = "zmk,combos";

  // All four thumb keys for keyboard control layer.
  combo_thumbs_keyboard_control {
    timeout-ms = <50>;
    key-positions = <LH1 LH0 RH0 RH1>;
    bindings = <&tog KEEBCTL>;
  };
  // Vertical combo left pinky for Z.
  combo_left_pinky_zed {
    timeout-ms = <50>;
    key-positions = <LM4 LB4>;
    bindings = <&kp Z>;
    layers = <HD_GOLD>;
  };
  // Left top ring and pinky mid for W.
  combo_northwest_wubbley {
    timeout-ms = <50>;
    key-positions = <LM4 LT3>;
    bindings = <&kp W>;
    layers = <HD_GOLD>;
  };
  // Vertical combo left pinky for exclamation point, only in symbols layer.
  combo_left_pinky_exclamatiom {
    timeout-ms = <50>;
    key-positions = <LM4 LB4>;
    bindings = <&kp EXCL>;
    layers = <SYM>;
  };
  // Vertical combo left index for J.
  combo_left_index_jay {
    timeout-ms = <50>;
    key-positions = <LT0 LM0>;
    bindings = <&kp J>;
    layers = <HD_GOLD>;
  };
  // Right top row inner two keys for pound sign.
  combo_right_northwest_octothorpe {
    timeout-ms = <50>;
    key-positions = <RT0 RT1>;
    bindings = <&kp HASH>;
    layers = <HD_GOLD>;
  };
  // Vertical combo right index for hyphen and plus.
  combo_right_index_minus_plus {
    timeout-ms = <50>;
    key-positions = <RT0 RM0>;
    bindings = <&minus_plus>;
    layers = <HD_GOLD>;
  };
  // Combo U and Y to produce Qu in Hands Down
  combo_uy_qu {
    timeout-ms = <50>;
    key-positions = <RB1 RB3>;
    bindings = <&squ>;
    layers = <HD_GOLD>;
  };
  // Combo U, O, and Y to produce bare Q in Hands Down.
  combo_uoy_q {
    timeout-ms = <50>;
    key-positions = <RB1 RB2 RB3>;
    bindings = <&kp Q>;
    layers = <HD_GOLD>;
  };
  // Combos for H digraphs in Hands Down.
  combo_sn_sh {
    timeout-ms = <50>;
    key-positions = <LM3 LM2>;
    bindings = <&sdh S>;
    layers = <HD_GOLD>;
  };
  combo_sd_ch {
    timeout-ms = <50>;
    key-positions = <LM3 LM1>;
    bindings = <&sdh C>;
    layers = <HD_GOLD>;
  };
  combo_nd_th {
    timeout-ms = <50>;
    key-positions = <LM2 LM1>;
    bindings = <&sdh T>;
    layers = <HD_GOLD>;
  };
  // This one makes less sense in Hands Down Gold, but I might just be used to it from Hands Down Neu.
  combo_gp_wh {
    timeout-ms = <50>;
    key-positions = <LT3 LT1>;
    bindings = <&sdh W>;
    layers = <HD_GOLD>;
  };
  combo_pm_ph {
    timeout-ms = <50>;
    key-positions = <LT2 LT1>;
    bindings = <&sdh P>;
    layers = <HD_GOLD>;
  };
  combo_gm_gh {
    timeout-ms = <50>;
    key-positions = <LT3 LT2>;
    bindings = <&sdh G>;
    layers = <HD_GOLD>;
  };
  // Combos for trigraphs and 3-letter consonant clusters.
  combo_rsn_sch {
    timeout-ms = <50>;
    key-positions = <LM4 LM3 LM2>;
    bindings = <&stch S>;
    layers = <HD_GOLD>;
  };
  combo_snt_tch {
    timeout-ms = <50>;
    key-positions = <LM3 LM2 LM1>;
    bindings = <&stch T>;
    layers = <HD_GOLD>;
  };
  // Another holdover from Hands Down Neu.
  combo_flc_ght {
    timeout-ms = <50>;
    key-positions = <LB3 LB2 LB1>;
    bindings = <&sght>;
    layers = <HD_GOLD>;
  };
  // Left ring and pinky home-row keys for ctrl.
  combo_west_ctrl {
    timeout-ms = <50>;
    key-positions = <LM4 LM3>;
    bindings = <&kp LCTRL>;
  };
  // Left ring and pinky bottom row keys for shift.
  combo_southwest_shift {
    timeout-ms = <50>;
    key-positions = <LB4 LB3>;
    bindings = <&kp LSHFT>;
  };
  // Left pinky and index for escape.
  combo_left_fork_escape {
    timeout-ms = <50>;
    key-positions = <LM4 LM1>;
    bindings = <&kp ESCAPE>;
  };
  // Left pinky and middle for tab.
  combo_left_prong_tab {
    timeout-ms = <50>;
    key-positions = <LM4 LM2>;
    bindings = <&kp TAB>;
  };
  // Right index and middle in top row for delete.
  combo_top_poke_delete {
    timeout-ms = <50>;
    key-positions = <RT1 RT2>;
    bindings = <&kp DELETE>;
  };
  // Right ring and pinky uppermost keys for backspace.
  combo_northeast_backspace {
    timeout-ms = <50>;
    key-positions = <RT3 RM4>;
    bindings = <&kp BACKSPACE>;
  };
  // Right ring and pinky home-row keys for enter.
  combo_east_enter {
    timeout-ms = <50>;
    key-positions = <RM3 RM4>;
    bindings = <&kp ENTER>;
  };
  // Right ring and pinky bottom row keys for shift.
  combo_southeast_shift {
    timeout-ms = <50>;
    key-positions = <RB3 RB4>;
    bindings = <&kp RSHFT>;
  };
  
}; // end combos

conditional_layers {
  compatible = "zmk,conditional-layers";
  numeric_momentary {
    if-layers = <SYM NAV>;
    then-layer = <NUM>;
  };
}; // end conditional layers
};

//       ,-----------------------.             ,-----------------------.
// ,-----+     |     |     |     |             |     |     |     |     +-----.
// |     |     |     |     |     |             |     |     |     |     |     |
// |     |     |     |     +-----'-----. ,-----`-----+     |     |     |     |
// `-----------------------|     |     | |     |     |-----------------------'
//     bindings = <
// &trans  &trans  &trans  &trans  &trans                 &trans  &trans  &trans  &trans  &trans
// &trans  &trans  &trans  &trans  &trans                 &trans  &trans  &trans  &trans  &trans
//         &trans  &trans  &trans                                 &trans  &trans  &trans
//                                 &trans &trans   &trans &trans
//     >;
